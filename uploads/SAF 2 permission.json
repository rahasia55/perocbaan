[{"code":"","color":"#FF795548","name":"ByJOKHIOAPPS","typeName":"","palette":"137","type":"h","spec":"STORAGE ACCESS FRAMEWORK BLOCKS BY JOKHIO APPS"},{"code":"/**\n* if you do not know how to use these blocks watch out the playlist\n* Android 11 storage access framework (SAF): https://www.youtube.com/playlist?list\u003dPL7YwprXjrPWP6PDTwkz-xvpMloFr2Ocu_\n* you need to add these import statements\n\n1  android.database.*\n2  java.io.*\n3  android.provider.DocumentsContract\n4  androidx.documentfile.provider.DocumentFile\n5  android.provider.DocumentsContract.Document\n6 java.util.zip.*\n\n\n* \n* add this int as custom variable\n* static final int NEW_FOLDER_REQUEST_CODE \u003d 43\n*\n* you can declare Document file by creating custom variable\n* example syntax \n*\n* DocumentFile mfile\n* \n*\n* and for uri\n*\n*Uri muri\n*\n*\n* to get list of files in a folder you may also need to add a map and a listmap\n* \n**/","color":"#FF795548","name":"instructions_","typeName":"","palette":"137","type":" ","spec":"instructions see code of this block"},{"code":"","color":"#FF795548","name":"intent_blocks","typeName":"","palette":"137","type":"h","spec":"Intent"},{"code":"%s.setAction(Intent.ACTION_OPEN_DOCUMENT_TREE);","color":"#FF795548","name":"Intent set action","typeName":"","palette":"137","type":" ","spec":"%m.intent setAction Document Tree "},{"code":"%s.setAction(android.provider.Settings.ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION);","color":"#FF795548","name":"Intent set action2","typeName":"","palette":"137","type":" ","spec":"%m.intent setAction Mng all files"},{"code":"%s.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);","color":"#FF795548","name":"Add Flags","typeName":"flags","palette":"137","type":" ","spec":"%m.intent add flags "},{"code":"final int takeFlags \u003d %s.getFlags()\n            \u0026 (Intent.FLAG_GRANT_READ_URI_PERMISSION\n            | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);","color":"#FF795548","name":"Take Flags","typeName":"flags","palette":"137","type":" ","spec":"%m.intent get flags "},{"code":"    %s.putExtra(DocumentsContract.EXTRA_INITIAL_URI, %s);","color":"#FF795548","name":"intent target folder","typeName":"","palette":"137","type":" ","spec":" %m.intent  set request target %m.Uri"},{"code":"        startActivityForResult(%s, %s);","color":"#FF795548","name":"Start activity for result","typeName":"","palette":"137","type":" ","spec":"Start %m.intent  request code %m.int"},{"code":"","color":"#FF795548","name":"uri_blocks","typeName":"","palette":"137","type":"h","spec":"URI"},{"code":"%s \u003d Uri.parse(%s);","color":"#FF795548","name":"ParseUri","typeName":"m.Uri","palette":"137","type":" ","spec":"Parse %m.Uri from %s "},{"code":"    %s \u003d %s.getUri();","color":"#FF795548","name":"getUriFromFile","typeName":"m.Uri","palette":"137","type":" ","spec":"Parse %m.Uri from %m.DocumentFile"},{"code":"%s.getPath()","color":"#FF795548","name":"pathFromUri","typeName":"","palette":"137","type":"s","spec":" %m.Uri .getPath"},{"code":"     try{\n        %s \u003d readTextFromUri(%s);\n        %s\n    } catch (Exception e) {\n    %s\n}","color":"#FF795548","name":"ReadTextFrom File","typeName":"","palette":"137","type":"e","spec":"set string  %s to text  from file %m.Uri  ","spec2":"else if error"},{"code":"alterDocument(%s, %s);","color":"#FF795548","name":"WriteTextToTheFile","typeName":"","palette":"137","type":" ","spec":"write %s to file  %m.Uri  "},{"code":"    try {\n       %s.setImageBitmap(getBitmapFromUri(%s));\n   } catch (IOException e) {\n    e.printStackTrace();\n   }","color":"#FF795548","name":"setImageBitmap","typeName":"","palette":"137","type":" ","spec":"%m.imageview set imageBitmap from %m.Uri  "},{"code":"if (copyFileFromUri(%s, %s, %s)) {\n    %s\n    } else {\n    %s\n}","color":"#FF795548","name":"copy file from uri","typeName":"","palette":"137","type":"e","spec":"Context %s.inputOnly  Copy File %m.Uri  to file %m.Uri","spec2":"If failed"},{"code":"if (copyFileFromUri2(%s, %s, %s)) {\n    %s\n    } else {\n    %s\n}","color":"#FF795548","name":"copy file from uri_2","typeName":"","palette":"137","type":"e","spec":"Context %s.inputOnly  Copy File %m.Uri  to file %m.Uri with method 2","spec2":"If failed"},{"code":"if (copyFileFromAssets(%s, %s)) {\n    %s\n    } else {\n    %s\n}","color":"#FF795548","name":"copy file from assets","typeName":"","palette":"137","type":"e","spec":" Copy asset  File %s   to file %m.Uri","spec2":"If failed"},{"code":"if (copyFileFromAssets2(%s, %s)) {\n    %s\n    } else {\n    %s\n}","color":"#FF795548","name":"copy file from assets_2","typeName":"","palette":"137","type":"e","spec":" Copy asset  File %s   to file %m.Uri with method 2","spec2":"If failed"},{"code":"private String readTextFromUri(Uri uri) throws IOException {\n    StringBuilder stringBuilder \u003d new StringBuilder();\n    try (InputStream inputStream \u003d\n            getContentResolver().openInputStream(uri);\n            BufferedReader reader \u003d new BufferedReader(\n            new InputStreamReader(Objects.requireNonNull(inputStream)))) {\n        String line;\n        while ((line \u003d reader.readLine()) !\u003d null) {\n            stringBuilder.append(line);\n        }\n    }\n    return stringBuilder.toString();\n}","color":"#FF795548","name":"ReadTextFromUri","typeName":"","palette":"137","type":" ","spec":"readTextFromUri "},{"code":"private void alterDocument(String str, Uri uri) {\n    try {\n        ParcelFileDescriptor pfd \u003d getApplicationContext().getContentResolver().\n                openFileDescriptor(uri, \"w\");\n        FileOutputStream fileOutputStream \u003d\n                new FileOutputStream(pfd.getFileDescriptor());\n        fileOutputStream.write((str).getBytes());\n        // Let the document provider know you\u0027re done by closing the stream.\n        fileOutputStream.close();\n        pfd.close();\n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}","color":"#FF795548","name":"WriteTextToFile","typeName":"","palette":"137","type":" ","spec":"writeTextFile "},{"code":"private Bitmap getBitmapFromUri(Uri uri) throws IOException {\n    ParcelFileDescriptor parcelFileDescriptor \u003d\n            getContentResolver().openFileDescriptor(uri, \"r\");\n    FileDescriptor fileDescriptor \u003d parcelFileDescriptor.getFileDescriptor();\n    Bitmap image \u003d BitmapFactory.decodeFileDescriptor(fileDescriptor);\n    parcelFileDescriptor.close();\n    return image;\n}","color":"#FF795548","name":"bitmapFromUri","typeName":"","palette":"137","type":" ","spec":"bitmap from Uri "},{"code":"public boolean copyFileFromUri(Context context, Uri fileUri, Uri targetUri)\n    {\n        InputStream inputStream \u003d null;\n        OutputStream outputStream \u003d null;\n\n        try\n        {\n            ContentResolver content \u003d context.getContentResolver();\n            inputStream \u003d content.openInputStream(fileUri);\n\n\n\t        ParcelFileDescriptor pfd \u003d getApplicationContext().getContentResolver().\n\t                openFileDescriptor(targetUri, \"w\");\n\t        FileOutputStream fileOutputStream \u003d\n\t                new FileOutputStream(pfd.getFileDescriptor());\n\t                    byte[] buffer \u003d new byte[1000];\n            int bytesRead \u003d 0;\n            while ( ( bytesRead \u003d inputStream.read( buffer, 0, buffer.length ) ) \u003e\u003d 0 )\n            {\n                 \nfileOutputStream.write(buffer, 0, buffer.length );\n            }\n\n\n\t        // Let the document provider know you\u0027re done by closing the stream.\n\t        fileOutputStream.close();\n\t        pfd.close();\n            return true;\n\t    } catch (FileNotFoundException e) {\n        %s\n\t        \n\t       \n\t    }\n        return false;\n    }","color":"#FF795548","name":"copy file","typeName":"","palette":"137","type":"c","spec":"CopyFile"},{"code":"public boolean copyFileFromUri2(Context context, Uri fileUri, Uri targetUri)\n    {\n        \t\tInputStream fis \u003d null;\n\t\tOutputStream fos \u003d null;\n\n\t\ttry {\n\t\t\t\nContentResolver content \u003d context.getContentResolver();\n            fis \u003d content.openInputStream(fileUri);\n            fos \u003d content.openOutputStream(targetUri);\n\n\t\t\tbyte[] buff \u003d new byte[1024];\n\t\t\tint length \u003d 0;\n\n\t\t\twhile ((length \u003d fis.read(buff)) \u003e 0) {\n\t\t\t\tfos.write(buff, 0, length);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tif (fis !\u003d null) {\n\t\t\t\ttry {\n\t\t\t\t\tfis.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (fos !\u003d null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\nreturn true;\n\t}","color":"#FF795548","name":"copy file_2","typeName":"function","palette":"137","type":" ","spec":"CopyFile method 2"},{"code":"public boolean copyFileFromAssets(String filename, Uri targetUri)\n    {\n        InputStream inputStream \u003d null;\n        OutputStream outputStream \u003d null;\n\n        try\n        {\n\t           \n\t            inputStream \u003d this.getAssets().open(filename);\n\t\n\t\n\t\t        ParcelFileDescriptor pfd \u003d getApplicationContext().getContentResolver().\n\t\t                openFileDescriptor(targetUri, \"w\");\n\t\t        FileOutputStream fileOutputStream \u003d\n\t\t                new FileOutputStream(pfd.getFileDescriptor());\n\t\t                    byte[] buffer \u003d new byte[1000];\n\t            int bytesRead \u003d 0;\n\t            while ( ( bytesRead \u003d inputStream.read( buffer, 0, buffer.length ) ) \u003e\u003d 0 )\n\t            {\n\t\t                 \n\t\tfileOutputStream.write(buffer, 0, buffer.length );\n\t\t            }\n\t\n\t\n\t\t        // Let the document provider know you\u0027re done by closing the stream.\n\t\t        fileOutputStream.close();\n\t\t        pfd.close();\n\t            return true;\n\t\t    } catch (FileNotFoundException e) {\n\t                    %s\n\t\t        \n\t\t       \n\t\t    }\n        return false;\n    }","color":"#FF795548","name":"copy file_from assets","typeName":"","palette":"137","type":"c","spec":"CopyAssets"},{"code":"public boolean copyFileFromAssets2(String filename, Uri targetUri)\n    {\n\t\n\t\n\t\t       \n        \t\tInputStream fis \u003d null;\n\t\tOutputStream fos \u003d null;\n\n\t\ttry {\n\t\t\t\nContentResolver content \u003d getApplicationContext().getContentResolver();\n            fis \u003d this.getAssets().open(filename);\n            fos \u003d content.openOutputStream(targetUri);\n\n\t\t\tbyte[] buff \u003d new byte[1024];\n\t\t\tint length \u003d 0;\n\n\t\t\twhile ((length \u003d fis.read(buff)) \u003e 0) {\n\t\t\t\tfos.write(buff, 0, length);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (fis !\u003d null) {\n\t\t\t\ttry {\n\t\t\t\t\tfis.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (fos !\u003d null) {\n\t\t\t\ttry {\n\t\t\t\t\tfos.close();\n\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\nreturn true;\n\t}","color":"#FF795548","name":"copy file_from assets_2","typeName":"","palette":"137","type":" ","spec":"CopyAssets method 2"},{"code":"            %s\n\t    } catch (IOException e) {\n       %s","color":"#FF795548","name":"exception 1 and 2","typeName":"","palette":"137","type":"e","spec":"IF FileNotFound","spec2":"IF I/O ERROR"},{"code":"%s.toString()","color":"#FF795548","name":"UriToString","typeName":"","palette":"137","type":"s","spec":"%m.Uri .toString"},{"code":"// Check for the freshest data.\ngetContentResolver().takePersistableUriPermission(%s, takeFlags);","color":"#FF795548","name":"pressistable","typeName":"","palette":"137","type":" ","spec":"Presisst Permission for %m.Uri"},{"code":"final int flags \u003d (Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);\n        getContentResolver().releasePersistableUriPermission(%s, flags);","color":"#FF795548","name":"delete_permissions","typeName":"","palette":"137","type":" ","spec":"Release Permission for %m.Uri"},{"code":"","color":"#FF795548","name":"misc_blocks","typeName":"","palette":"137","type":"h","spec":"MISC"},{"code":"Boolean updateDirectoryEntries(Uri uri) {\n\nHashMap\u003cString, Object\u003e map \u003d new HashMap\u003c\u003e();\n\n\n        \nContentResolver contentResolver \u003d getApplicationContext().getContentResolver();\n\n\n        Uri childrenUri \u003d DocumentsContract.buildChildDocumentsUriUsingTree(uri,\n                DocumentsContract.getTreeDocumentId(uri));\n\n \n\n        Cursor childCursor \u003d contentResolver.query(childrenUri, new String[]{Document.COLUMN_DOCUMENT_ID,\n                Document.COLUMN_DISPLAY_NAME, Document.COLUMN_MIME_TYPE}, null, null, null);\n        try {\n            \n            while (childCursor.moveToNext()) {\n                \n\n\nfinal String docId \u003d childCursor.getString(0);\n\t\t\t\t\t                final String name \u003d childCursor.getString(1);\n\t\t\t\t\t                final String mime \u003d childCursor.getString(2);\n\n\nmap \u003d new HashMap\u003c\u003e();\n\t\t\t\t\t                \n\t\t\t\t\tmap.put(\"docId\", docId);\n\t\t\t\t\tmap.put(\"name\", name);\n\t\t\t\t\tmap.put(\"mime\", mime);\n\t\t%s.add(map);\r\n\t\t            }\r\r\n\t            \n        } finally {\n            closeQuietly(childCursor);\n        }\nreturn true;\n    }\n\n\n\n\n\n\n// SECOND METHOD TO GET ENTRIES FOR CHILDREN\n\nBoolean updateDirectoryEntries(Uri uri, String str) {\n\nHashMap\u003cString, Object\u003e map \u003d new HashMap\u003c\u003e();\n\n \n        \nContentResolver contentResolver \u003d getApplicationContext().getContentResolver();\n\n\n        Uri childrenUri \u003d DocumentsContract.buildChildDocumentsUriUsingTree(uri, str);\n\n \n\n        Cursor childCursor \u003d contentResolver.query(childrenUri, new String[]{Document.COLUMN_DOCUMENT_ID,\n                Document.COLUMN_DISPLAY_NAME, Document.COLUMN_MIME_TYPE}, null, null, null);\n        try {\n            \n            while (childCursor.moveToNext()) {\n                \n\n\nfinal String docId \u003d childCursor.getString(0);\n\t\t\t\t\t                final String name \u003d childCursor.getString(1);\n\t\t\t\t\t                final String mime \u003d childCursor.getString(2);\n\n\nmap \u003d new HashMap\u003c\u003e();\n\t\t\t\t\t                \n\t\t\t\t\tmap.put(\"docId\", docId);\n\t\t\t\t\tmap.put(\"name\", name);\n\t\t\t\t\tmap.put(\"mime\", mime);\n\t\t%s.add(map);\r\n\t\t            }\r\r\n\t            \n        } finally {\n            closeQuietly(childCursor);\n        }\nreturn true;\n    }\n\n\n\n// Util method to check if the mime type is a directory\nprivate static boolean isDirectory(String mimeType) {\n    return DocumentsContract.Document.MIME_TYPE_DIR.equals(mimeType);\n}\n\n\n// Util method to close a closeable\nprivate static void closeQuietly(Closeable closeable) {\n    if (closeable !\u003d null) {\n        try {\n            closeable.close();\n        } catch (RuntimeException re) {\n            throw re;\n        } catch (Exception ignore) {\n            // ignore exception\n        }\n    }\n}","color":"#FF795548","name":"transversDirectories","typeName":"saf","palette":"137","type":" ","spec":"function getEntries %m.listMap  2nd %m.listMap "},{"code":"updateDirectoryEntries(%s)","color":"#FF795548","name":"transverDirectories","typeName":"saf","palette":"137","type":"b","spec":"getEntries %m.Uri  "},{"code":"updateDirectoryEntries(%s, %s)","color":"#FF795548","name":"transverDirectories_2","typeName":"saf","palette":"137","type":"b","spec":"getEntries %m.Uri  %s "},{"code":"isDirectory(%s)","color":"#FF795548","name":"isDirectory","typeName":"saf","palette":"137","type":"b","spec":"isMimeDir %s "},{"code":"%s.toString()","color":"#FF795548","name":"ToString","typeName":"","palette":"137","type":"s","spec":"%s.inputOnly .toString"},{"code":"getMimeType(%s)","color":"#FF795548","name":"getMimeType","typeName":"","palette":"137","type":"s","spec":"getMimeType of %s "},{"code":"return %s ;","color":"#FF795548","name":"return block","typeName":"return","palette":"137","type":" ","spec":"return %s.inputOnly  "},{"code":"// url \u003d file path or whatever suitable URL you want.\npublic static String getMimeType(String url) {\n    String type \u003d null;\n    String extension \u003d MimeTypeMap.getFileExtensionFromUrl(url);\n    if (extension !\u003d null) {\n        type \u003d MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension);\n    }\n    return type;\n}","color":"#FF795548","name":"getting mime type","typeName":"function","palette":"137","type":" ","spec":"mime type getter  "},{"code":"","color":"#FF795548","name":"Activity Result","typeName":"","palette":"137","type":"h","spec":"Activity Result"},{"code":"@Override\n    protected void onActivityResult(int _requestCode, int _resultCode, Intent _data) {\n            %s\n}","color":"#FF795548","name":"onActivityResult","typeName":"onActivityResult","palette":"137","type":"c","spec":"onActivityResult "},{"code":"super.onActivityResult(_requestCode, _resultCode, _data);\n","color":"#FF795548","name":"super.onActivityResult","typeName":"super","palette":"137","type":" ","spec":"Super onActivityResult"},{"code":"    if (_resultCode \u003d\u003d Activity.RESULT_OK) {\n        %s\n       } else {\n       %s\n   }","color":"#FF795548","name":"Result OK","typeName":"","palette":"137","type":"e","spec":"if RESULT_OK","spec2":"else"},{"code":"    if (_data !\u003d null) {\n        %s\n       } else {\n       %s\n   }","color":"#FF795548","name":"Data is not Null","typeName":"","palette":"137","type":"e","spec":"if Data is not NULL","spec2":"else"},{"code":"       %s \u003d _data.getData();","color":"#FF795548","name":"setUriData","typeName":"","palette":"137","type":" ","spec":"%m.Uri  \u003d IntentData"},{"code":"","color":"#FF795548","name":"Document File","typeName":"","palette":"137","type":"h","spec":"Document File"},{"code":"    %s \u003d DocumentFile.fromTreeUri(this, %s);\n                    ","color":"#FF795548","name":"Document File from TreeUri","typeName":"","palette":"137","type":" ","spec":"%m.DocumentFile  from %m.Uri"},{"code":"    %s \u003d DocumentFile.fromFile(%s);\n                 ","color":"#FF795548","name":"Document File from File","typeName":"","palette":"137","type":" ","spec":"%m.DocumentFile  from file %s.inputOnly "},{"code":"    %s \u003d %s.createDirectory(%s);","color":"#FF795548","name":"Document File Create Folder","typeName":"","palette":"137","type":" ","spec":"%m.DocumentFile  Parent %m.DocumentFile  Create Folder%s  "},{"code":"    %s \u003d %s.createFile(%s, %s);","color":"#FF795548","name":"Document File Create File","typeName":"","palette":"137","type":" ","spec":"%m.DocumentFile  Parent %m.DocumentFile  Create File%s name %s   "},{"code":"try{\n        DocumentsContract.deleteDocument(getApplicationContext().getContentResolver(), %s);\n    %s\n        } catch (FileNotFoundException e) {\n        %s\n    }             ","color":"#FF795548","name":"Delete File from uri","typeName":"","palette":"137","type":"e","spec":"Delete File  %m.Uri","spec2":"If file not found"},{"code":"Boolean unzip (Uri _muri, DocumentFile _myDestFolder) {\n\n     Uri muri \u003d _muri;\r\n\t  DocumentFile myFolder \u003d null;\r\n\tDocumentFile mySubFolder \u003d null;\r\n\t DocumentFile mySubSubFolder \u003d null;\n\ntry {\n\t\ttry{\n\t\t\t\tInputStream is \u003d getContentResolver().openInputStream(muri);\n\t\t\t\tBufferedInputStream bis \u003d new BufferedInputStream(is);\n\t\t\t\tZipInputStream zis \u003d new ZipInputStream(bis);\n\t\t\t\tZipEntry zipEntry;\n\t\t\t\t\n\t\t\t\twhile ((zipEntry \u003d zis.getNextEntry()) !\u003d null) {\n\t\t\t\t\t\tString fileName \u003d null; \n\t\t\t\t\t\t\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tfileName \u003d zipEntry.getName();        \n\t\t\t\t\t\t\t\tfileName \u003d fileName.replace(\"\\\\\",File.separator).replace(\"/\",File.separator);\n\t\t\t\t\t\t\t\tint p\u003dfileName.lastIndexOf(File.separator);        \n\t\t\t\t\t\t\t\tDocumentFile destFolder \u003d _myDestFolder;\n\t                     //DocumentFile of the destination folder\n\t\t\t\t\t\t\t\tString destName \u003d fileName;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (p\u003e\u003d0) {\n\t\t\t\t\t\t\t\t\t\tString[] split \u003d fileName.split(File.separator);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t//If the .zip file contains multiple folder levels, this is where you  \n\t\t\t\t\t\t\t\t\t\t//have to check and then create them, e.g. for 3 levels:\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tif(split.length\u003d\u003d1) {\nif(myFolder\u003d\u003dnull) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmyFolder \u003d _myDestFolder;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tdestFolder \u003d myFolder;\n\t\t\t\t\t\t\t\t\t\t\t\tdestName \u003d fileName;\n\t\t\t\t\t\t\t\t\t\t} else if(split.length\u003d\u003d2) {\nmyFolder \u003d _myDestFolder;\n\t\t\t\t\t\t\t\t\t\t\t\tif(mySubFolder\u003d\u003dnull) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmySubFolder \u003d myFolder.createDirectory(split[0]);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tdestFolder \u003d mySubFolder;\n\t\t\t\t\t\t\t\t\t\t\t\tdestName \u003d split[1];\n\t\t\t\t\t\t\t\t\t\t} else if(split.length\u003d\u003d3) {\nmyFolder \u003d _myDestFolder;\n\t\t\t\t\t\t\t\t\t\t\t\tif(mySubFolder\u003d\u003dnull) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmySubFolder \u003d myFolder.createDirectory(split[0]);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tif(mySubSubFolder\u003d\u003dnull) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmySubSubFolder \u003d mySubFolder.createDirectory(split[1]);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tdestFolder \u003d mySubSubFolder;\n\t\t\t\t\t\t\t\t\t\t\t\tdestName \u003d split[2];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\n\nif (!zipEntry.isDirectory()) {\n\n\t\t\t\t\t\t\t\tDocumentFile df \u003d null;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//Now you have to tell it what file extensions (\"MIME\" type) you want to use, e.g.:\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tdf \u003d destFolder.createFile(\"*/*\",destName);\n\t\t\t\t\t\t\t\tOutputStream out \u003d getContentResolver().openOutputStream(df.getUri());\n\t\t\t\t\t\t\t\tBufferedOutputStream bos \u003d new BufferedOutputStream(out);\n\t\t\t\t\t\t\t\tlong zipfilesize \u003d zipEntry.getSize();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tbyte[] buffer \u003d new byte[10000];\n\t\t\t\t\t\t\t\tint len \u003d 0;\n\t\t\t\t\t\t\t\tint totlen \u003d 0;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\twhile (((len \u003d zis.read(buffer, 0, 10000)) \u003e 0) ) {\n\t\t\t\t\t\t\t\t\t\tbos.write(buffer, 0, len);\n\t\t\t\t\t\t\t\t\t\ttotlen +\u003d len;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tbos.close();\n}\n\t\t\t\t\t\t} catch (IOException e1) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tis.close();\n\t\t\t\tbis.close();\n\t\t\t\tzis.close();\n\t\t} catch (IOException e2) {\n\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t\t\n} catch(Exception e){\n\t\treturn false;\n}\t\t           \nreturn true;\n}","color":"#FF795548","name":"Unzip from uri","typeName":"","palette":"137","type":" ","spec":"Unzip","spec2":"If file not found"},{"code":"Boolean unzip (Uri _muri, DocumentFile _myDestFolder) {\n\n     Uri muri \u003d _muri;\r\n\t  DocumentFile myFolder \u003d null;\r\n\tDocumentFile mySubFolder \u003d null;\r\n\t DocumentFile mySubSubFolder \u003d null;\nDocumentFile tempFile \u003d null;\n\ntry {\n\t\ttry{\n\t\t\t\tInputStream is \u003d getContentResolver().openInputStream(muri);\n\t\t\t\tBufferedInputStream bis \u003d new BufferedInputStream(is);\n\t\t\t\tZipInputStream zis \u003d new ZipInputStream(bis);\n\t\t\t\tZipEntry zipEntry;\n\t\t\t\t\n\t\t\t\twhile ((zipEntry \u003d zis.getNextEntry()) !\u003d null) {\n\t\t\t\t\t\tString fileName \u003d null; \n\t\t\t\t\t\t\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tfileName \u003d zipEntry.getName();        \n\t\t\t\t\t\t\t\tfileName \u003d fileName.replace(\"\\\\\",File.separator).replace(\"/\",File.separator);\n\t\t\t\t\t\t\t\tint p\u003dfileName.lastIndexOf(File.separator);        \n\t\t\t\t\t\t\t\tDocumentFile destFolder \u003d _myDestFolder;\n\t                     //DocumentFile of the destination folder\n\t\t\t\t\t\t\t\tString destName \u003d fileName;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (p\u003e\u003d0) {\n\t\t\t\t\t\t\t\t\t\tString[] split \u003d fileName.split(File.separator);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t//If the .zip file contains multiple folder levels, this is where you  \n\t\t\t\t\t\t\t\t\t\t//have to check and then create them, e.g. for 3 levels:\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tif(split.length\u003d\u003d1) {\nif(myFolder\u003d\u003dnull) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmyFolder \u003d _myDestFolder;\n\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tdestFolder \u003d myFolder;\n\t\t\t\t\t\t\t\t\t\t\t\tdestName \u003d fileName;\n\t\t\t\t\t\t\t\t\t\t} else if(split.length\u003d\u003d2) {\nmyFolder \u003d _myDestFolder;\n\t\t\t\t\t\t\t\t\t\t\t\tif(mySubFolder\u003d\u003dnull) {\ntempFile \u003d null;\ntempFile \u003d DocumentFile.fromSingleUri(this, Uri.parse(myFolder.getUri().toString().concat(Uri.encode(\"/\").concat(split[0]))));\n\n\n\nif (tempFile.exists()) {\n\nmySubFolder \u003d tempFile;\n\n\r\n\t\r\n}\relse {\nmySubFolder \u003d myFolder.createDirectory(split[0]);\r\n\t\r\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tdestFolder \u003d mySubFolder;\n\t\t\t\t\t\t\t\t\t\t\t\tdestName \u003d split[1];\n\n\t\t\t\t\t\t\t\t\t\t} else if(split.length\u003d\u003d3) {\n\nmyFolder \u003d _myDestFolder;\n\t\t\t\t\t\t\t\t\t\t\t\tif(mySubFolder\u003d\u003dnull) {\n\ntempFile \u003d null;\ntempFile \u003d DocumentFile.fromSingleUri(this, Uri.parse(myFolder.getUri().toString().concat(Uri.encode(\"/\").concat(split[0]))));\n\n\n\nif (tempFile.exists()) {\n\nmySubFolder \u003d tempFile;\n\n\r\n\t\r\n}\relse {\nmySubFolder \u003d myFolder.createDirectory(split[0]);\r\n\t\r\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tif(mySubSubFolder\u003d\u003dnull) {\ntempFile \u003d null;\ntempFile \u003d DocumentFile.fromSingleUri(this, Uri.parse(mySubFolder.getUri().toString().concat(Uri.encode(\"/\").concat(split[1]))));\n\n\n\nif (tempFile.exists()) {\n\nmySubSubFolder \u003d tempFile;\n\n\r\n\t\r\n}\relse {\nmySubSubFolder \u003d mySubFolder.createDirectory(split[1]);\r\n\t\r\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tdestFolder \u003d mySubSubFolder;\n\t\t\t\t\t\t\t\t\t\t\t\tdestName \u003d split[2];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\n\nif (!zipEntry.isDirectory()) {\n\n\t\t\t\t\t\t\t\tDocumentFile df \u003d null;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//Now you have to tell it what file extensions (\"MIME\" type) you want to use, e.g.:\n\ntempFile \u003d null;\ntempFile \u003d DocumentFile.fromSingleUri(this, Uri.parse(destFolder.getUri().toString().concat(Uri.encode(\"/\").concat(destName))));\n\n\nif (tempFile.exists()) {\n\ndf \u003d tempFile;\n\n\r\n\t\r\n}\relse {\ndf \u003d destFolder.createFile(\"*/*\",destName);\r\n\t\r\n}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tOutputStream out \u003d getContentResolver().openOutputStream(df.getUri());\n\t\t\t\t\t\t\t\tBufferedOutputStream bos \u003d new BufferedOutputStream(out);\n\t\t\t\t\t\t\t\tlong zipfilesize \u003d zipEntry.getSize();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tbyte[] buffer \u003d new byte[10000];\n\t\t\t\t\t\t\t\tint len \u003d 0;\n\t\t\t\t\t\t\t\tint totlen \u003d 0;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\twhile (((len \u003d zis.read(buffer, 0, 10000)) \u003e 0) ) {\n\t\t\t\t\t\t\t\t\t\tbos.write(buffer, 0, len);\n\t\t\t\t\t\t\t\t\t\ttotlen +\u003d len;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tbos.close();\n}\n\t\t\t\t\t\t} catch (IOException e1) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tSketchwareUtil.showMessage(getApplicationContext(), e1.getMessage());\t\t\r\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tis.close();\n\t\t\t\tbis.close();\n\t\t\t\tzis.close();\n\t\t} catch (IOException e2) {\nSketchwareUtil.showMessage(getApplicationContext(), e2.getMessage());\n\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t\t\n} catch(Exception e){\nSketchwareUtil.showMessage(getApplicationContext(), e.getMessage());\n\t\treturn false;\n}\t\t           \nreturn true;\n}","color":"#FF795548","name":"Unzip with replace","typeName":"","palette":"137","type":" ","spec":"Unzip with replace","spec2":"If file not found"},{"code":"Boolean unzipAssets(String _filename, DocumentFile _myDestFolder) {\n\r\n\t  DocumentFile myFolder \u003d null;\r\n\t  DocumentFile mySubFolder \u003d null;\r\n\t DocumentFile mySubSubFolder \u003d null;\n\ntry {\n\t\ttry{\n\t\t\t\tInputStream is \u003d this.getAssets().open(_filename);\n\t\t\t\tBufferedInputStream bis \u003d new BufferedInputStream(is);\n\t\t\t\tZipInputStream zis \u003d new ZipInputStream(bis);\n\t\t\t\tZipEntry zipEntry;\n\t\t\t\t\n\t\t\t\twhile ((zipEntry \u003d zis.getNextEntry()) !\u003d null) {\n\t\t\t\t\t\tString fileName \u003d null; \n\t\t\t\t\t\t\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tfileName \u003d zipEntry.getName();        \n\t\t\t\t\t\t\t\tfileName \u003d fileName.replace(\"\\\\\",File.separator).replace(\"/\",File.separator);\n\t\t\t\t\t\t\t\tint p\u003dfileName.lastIndexOf(File.separator);        \n\t\t\t\t\t\t\t\tDocumentFile destFolder \u003d _myDestFolder;\n\t                     //DocumentFile of the destination folder\n\t\t\t\t\t\t\t\tString destName \u003d fileName;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (p\u003e\u003d0) {\n\t\t\t\t\t\t\t\t\t\tString[] split \u003d fileName.split(File.separator);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t//If the .zip file contains multiple folder levels, this is where you  \n\t\t\t\t\t\t\t\t\t\t//have to check and then create them, e.g. for 3 levels:\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tif(split.length\u003d\u003d1) {\nif(myFolder\u003d\u003dnull) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmyFolder \u003d _myDestFolder;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tdestFolder \u003d myFolder;\n\t\t\t\t\t\t\t\t\t\t\t\tdestName \u003d fileName;\n\t\t\t\t\t\t\t\t\t\t} else if(split.length\u003d\u003d2) {\nmyFolder \u003d _myDestFolder;\n\t\t\t\t\t\t\t\t\t\t\t\tif(mySubFolder\u003d\u003dnull) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmySubFolder \u003d myFolder.createDirectory(split[0]);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tdestFolder \u003d mySubFolder;\n\t\t\t\t\t\t\t\t\t\t\t\tdestName \u003d split[1];\n\t\t\t\t\t\t\t\t\t\t} else if(split.length\u003d\u003d3) {\nmyFolder \u003d _myDestFolder;\n\t\t\t\t\t\t\t\t\t\t\t\tif(mySubFolder\u003d\u003dnull) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmySubFolder \u003d myFolder.createDirectory(split[0]);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tif(mySubSubFolder\u003d\u003dnull) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmySubSubFolder \u003d mySubFolder.createDirectory(split[1]);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tdestFolder \u003d mySubSubFolder;\n\t\t\t\t\t\t\t\t\t\t\t\tdestName \u003d split[2];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\n\nif (!zipEntry.isDirectory()) {\n\n\t\t\t\t\t\t\t\tDocumentFile df \u003d null;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//Now you have to tell it what file extensions (\"MIME\" type) you want to use, e.g.:\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tdf \u003d destFolder.createFile(\"*/*\",destName);\n\t\t\t\t\t\t\t\tOutputStream out \u003d getContentResolver().openOutputStream(df.getUri());\n\t\t\t\t\t\t\t\tBufferedOutputStream bos \u003d new BufferedOutputStream(out);\n\t\t\t\t\t\t\t\tlong zipfilesize \u003d zipEntry.getSize();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tbyte[] buffer \u003d new byte[10000];\n\t\t\t\t\t\t\t\tint len \u003d 0;\n\t\t\t\t\t\t\t\tint totlen \u003d 0;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\twhile (((len \u003d zis.read(buffer, 0, 10000)) \u003e 0) ) {\n\t\t\t\t\t\t\t\t\t\tbos.write(buffer, 0, len);\n\t\t\t\t\t\t\t\t\t\ttotlen +\u003d len;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tbos.close();\n}\n\t\t\t\t\t\t} catch (IOException e1) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tis.close();\n\t\t\t\tbis.close();\n\t\t\t\tzis.close();\n\t\t} catch (IOException e2) {\n\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t\t\n} catch(Exception e){\n\t\treturn false;\n}\t\t           \nreturn true;\n}","color":"#FF795548","name":"Unzip from assets","typeName":"","palette":"137","type":" ","spec":"Unzip assets","spec2":"If file not found"},{"code":"Boolean unzipAssets(String _filename, DocumentFile _myDestFolder) {\n\r\n\t  DocumentFile myFolder \u003d null;\r\n\t  DocumentFile mySubFolder \u003d null;\r\n\t DocumentFile mySubSubFolder \u003d null;\nDocumentFile tempFile \u003d null;\n\ntry {\n\t\ttry{\n\t\t\t\tInputStream is \u003d this.getAssets().open(_filename);\n\t\t\t\tBufferedInputStream bis \u003d new BufferedInputStream(is);\n\t\t\t\tZipInputStream zis \u003d new ZipInputStream(bis);\n\t\t\t\tZipEntry zipEntry;\n\t\t\t\t\n\t\t\t\twhile ((zipEntry \u003d zis.getNextEntry()) !\u003d null) {\n\t\t\t\t\t\tString fileName \u003d null; \n\t\t\t\t\t\t\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tfileName \u003d zipEntry.getName();        \n\t\t\t\t\t\t\t\tfileName \u003d fileName.replace(\"\\\\\",File.separator).replace(\"/\",File.separator);\n\t\t\t\t\t\t\t\tint p\u003dfileName.lastIndexOf(File.separator);        \n\t\t\t\t\t\t\t\tDocumentFile destFolder \u003d _myDestFolder;\n\t                     //DocumentFile of the destination folder\n\t\t\t\t\t\t\t\tString destName \u003d fileName;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (p\u003e\u003d0) {\n\t\t\t\t\t\t\t\t\t\tString[] split \u003d fileName.split(File.separator);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t//If the .zip file contains multiple folder levels, this is where you  \n\t\t\t\t\t\t\t\t\t\t//have to check and then create them, e.g. for 3 levels:\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tif(split.length\u003d\u003d1) {\nif(myFolder\u003d\u003dnull) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmyFolder \u003d _myDestFolder;\n\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tdestFolder \u003d myFolder;\n\t\t\t\t\t\t\t\t\t\t\t\tdestName \u003d fileName;\n\t\t\t\t\t\t\t\t\t\t} else if(split.length\u003d\u003d2) {\nmyFolder \u003d _myDestFolder;\n\t\t\t\t\t\t\t\t\t\t\t\tif(mySubFolder\u003d\u003dnull) {\ntempFile \u003d null;\ntempFile \u003d DocumentFile.fromSingleUri(this, Uri.parse(myFolder.getUri().toString().concat(Uri.encode(\"/\").concat(split[0]))));\n\n\n\nif (tempFile.exists()) {\n\nmySubFolder \u003d tempFile;\n\n\r\n\t\r\n}\relse {\nmySubFolder \u003d myFolder.createDirectory(split[0]);\r\n\t\r\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tdestFolder \u003d mySubFolder;\n\t\t\t\t\t\t\t\t\t\t\t\tdestName \u003d split[1];\n\n\t\t\t\t\t\t\t\t\t\t} else if(split.length\u003d\u003d3) {\n\nmyFolder \u003d _myDestFolder;\n\t\t\t\t\t\t\t\t\t\t\t\tif(mySubFolder\u003d\u003dnull) {\n\ntempFile \u003d null;\ntempFile \u003d DocumentFile.fromSingleUri(this, Uri.parse(myFolder.getUri().toString().concat(Uri.encode(\"/\").concat(split[0]))));\n\n\n\nif (tempFile.exists()) {\n\nmySubFolder \u003d tempFile;\n\n\r\n\t\r\n}\relse {\nmySubFolder \u003d myFolder.createDirectory(split[0]);\r\n\t\r\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tif(mySubSubFolder\u003d\u003dnull) {\ntempFile \u003d null;\ntempFile \u003d DocumentFile.fromSingleUri(this, Uri.parse(mySubFolder.getUri().toString().concat(Uri.encode(\"/\").concat(split[1]))));\n\n\n\nif (tempFile.exists()) {\n\nmySubSubFolder \u003d tempFile;\n\n\r\n\t\r\n}\relse {\nmySubSubFolder \u003d mySubFolder.createDirectory(split[1]);\r\n\t\r\n}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\tdestFolder \u003d mySubSubFolder;\n\t\t\t\t\t\t\t\t\t\t\t\tdestName \u003d split[2];\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\n\nif (!zipEntry.isDirectory()) {\n\n\t\t\t\t\t\t\t\tDocumentFile df \u003d null;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//Now you have to tell it what file extensions (\"MIME\" type) you want to use, e.g.:\n\ntempFile \u003d null;\ntempFile \u003d DocumentFile.fromSingleUri(this, Uri.parse(destFolder.getUri().toString().concat(Uri.encode(\"/\").concat(destName))));\n\n\nif (tempFile.exists()) {\n\ndf \u003d tempFile;\n\n\r\n\t\r\n}\relse {\ndf \u003d destFolder.createFile(\"*/*\",destName);\r\n\t\r\n}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tOutputStream out \u003d getContentResolver().openOutputStream(df.getUri());\n\t\t\t\t\t\t\t\tBufferedOutputStream bos \u003d new BufferedOutputStream(out);\n\t\t\t\t\t\t\t\tlong zipfilesize \u003d zipEntry.getSize();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tbyte[] buffer \u003d new byte[10000];\n\t\t\t\t\t\t\t\tint len \u003d 0;\n\t\t\t\t\t\t\t\tint totlen \u003d 0;\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\twhile (((len \u003d zis.read(buffer, 0, 10000)) \u003e 0) ) {\n\t\t\t\t\t\t\t\t\t\tbos.write(buffer, 0, len);\n\t\t\t\t\t\t\t\t\t\ttotlen +\u003d len;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tbos.close();\n}\n\t\t\t\t\t\t} catch (IOException e1) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tSketchwareUtil.showMessage(getApplicationContext(), e1.getMessage());\t\t\r\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tis.close();\n\t\t\t\tbis.close();\n\t\t\t\tzis.close();\n\t\t} catch (IOException e2) {\nSketchwareUtil.showMessage(getApplicationContext(), e2.getMessage());\n\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t\t\n} catch(Exception e){\nSketchwareUtil.showMessage(getApplicationContext(), e.getMessage());\n\t\treturn false;\n}\t\t           \nreturn true;\n}","color":"#FF795548","name":"Unzip assets with replace","typeName":"","palette":"137","type":" ","spec":"Unzip assets with replace","spec2":"If file not found"},{"code":"unzip (%s, %s)","color":"#FF795548","name":"Unzip call","typeName":"","palette":"137","type":"b","spec":"Unzip %m.Uri to folder  %m.DocumentFile","spec2":"If file not found"},{"code":"unzipAssets (%s, %s)","color":"#FF795548","name":"Unzip assets call","typeName":"","palette":"137","type":"b","spec":"Unzip %s from assets to folder  %m.DocumentFile","spec2":"If file not found"},{"code":"%s.getName()","color":"#FF795548","name":"Document File getName","typeName":"","palette":"137","type":"s","spec":"%m.DocumentFile .getName"},{"code":"Uri.decode(%s.toString()).endsWith(\":\")","color":"#FF795548","name":"Directory is root","typeName":"","palette":"137","type":"b","spec":"%m.Uri is root"},{"code":"%s.canRead()","color":"#FF795548","name":"Document File can read","typeName":"","palette":"137","type":"b","spec":"%m.DocumentFile canRead"},{"code":"%s.canWrite()","color":"#FF795548","name":"Document File can write","typeName":"","palette":"137","type":"b","spec":"%m.DocumentFile canWrite"},{"code":"%s \u003d\u003d null ","color":"#FF795548","name":"Document File is null","typeName":"","palette":"137","type":"b","spec":"%m.DocumentFile is null"},{"code":"%s.exists()","color":"#FF795548","name":"Document File exists","typeName":"","palette":"137","type":"b","spec":"%m.DocumentFile exists"},{"code":"Environment.isExternalStorageManager()","color":"#FF795548","name":"isExternalStorageManager","typeName":"","palette":"137","type":"b","spec":"can access all files"}]